
import EigenPortfolio as ep
import oracle as oa
import matplotlib.pyplot as plt
import CNNportforlio as cnn
import math
import numpy as np

Re_ep, D, M= ep.main()

# get return from senarios other than baseline
Re_oa = oa.main()
#Re_cnn = cnn.main()
Re_cnn_test = [-0.014807714149355888, -0.05512503162026405, -0.04122151806950569, -0.012694030068814754, 0.0571012943983078, 0.013195204548537731, -0.10323681682348251, 0.05336137115955353, 0.019293472170829773, 0.011776459403336048, 0.005290846340358257, 0.012009579688310623, 0.01347731426358223, 0.026381151750683784, -0.028121378272771835, -0.0044950200244784355, 0.0018804875435307622, 0.0626310482621193, -0.025363033637404442, 0.1563202142715454, 0.06463785469532013, -0.027876459062099457, -0.008470351807773113, -0.07526734471321106, 0.041258327662944794, 0.010079851374030113, 0.04389847442507744, -0.007912030443549156, 0.0163759533315897, 0.027143102139234543, -0.012412595562636852, 0.02627021074295044, 0.017093472182750702, 0.05476566031575203, 0.0022737307008355856, 0.016268141567707062, -0.019795579835772514, 0.015223965048789978, -0.0006209193961694837, -0.009678196161985397, 0.018862446770071983, -0.01187615841627121, 0.020047029480338097, 0.004612908698618412, -0.009518500417470932, -0.010059393011033535, 0.05487605929374695, 0.03095647692680359, 0.009577382355928421, 0.0014921074034646153, 0.0016580418450757861, 0.03231893479824066, 0.011774206534028053, -0.06993858516216278, -0.012055364437401295, -0.006034148391336203, -0.03401101753115654, 0.06029924005270004, 0.1588975340127945, 0.024834275245666504, -0.029615264385938644, -0.06051868572831154, -0.023021016269922256, 0.004709329921752214, 0.006495135370641947, 0.0328625813126564, 0.048296380788087845, 0.010540599934756756, -0.027613693848252296, 0.002334429882466793, 0.0741630271077156, 0.022138116881251335]
Date_cnn_test = [('2016-05-25', '2016-06-01'), ('2016-06-01', '2016-06-08'), ('2016-06-08', '2016-06-15'), ('2016-06-15', '2016-06-22'), ('2016-06-22', '2016-06-29'), ('2016-06-29', '2016-07-06'), ('2016-07-06', '2016-07-13'), ('2016-07-13', '2016-07-20'), ('2016-07-20', '2016-07-27'), ('2016-07-27', '2016-08-03'), ('2016-08-03', '2016-08-10'), ('2016-08-10', '2016-08-17'), ('2016-08-17', '2016-08-24'), ('2016-08-24', '2016-08-31'), ('2016-08-31', '2016-09-07'), ('2016-09-07', '2016-09-14'), ('2016-09-14', '2016-09-21'), ('2016-09-21', '2016-09-28'), ('2016-09-28', '2016-10-05'), ('2016-10-05', '2016-10-12'), ('2016-10-12', '2016-10-19'), ('2016-10-19', '2016-10-26'), ('2016-10-26', '2016-11-02'), ('2016-11-02', '2016-11-09'), ('2016-11-09', '2016-11-16'), ('2016-11-16', '2016-11-23'), ('2016-11-23', '2016-11-30'), ('2016-11-30', '2016-12-07'), ('2016-12-07', '2016-12-14'), ('2016-12-14', '2016-12-21'), ('2016-12-21', '2016-12-28'), ('2016-12-28', '2017-01-04'), ('2017-01-04', '2017-01-11'), ('2017-01-11', '2017-01-18'), ('2017-01-18', '2017-01-25'), ('2017-01-25', '2017-02-01'), ('2017-02-01', '2017-02-08'), ('2017-02-08', '2017-02-15'), ('2017-02-15', '2017-02-22'), ('2017-02-22', '2017-03-01'), ('2017-03-01', '2017-03-08'), ('2017-03-08', '2017-03-15'), ('2017-03-15', '2017-03-22'), ('2017-03-22', '2017-03-29'), ('2017-03-29', '2017-04-05'), ('2017-04-05', '2017-04-12'), ('2017-04-12', '2017-04-19'), ('2017-04-19', '2017-04-26'), ('2017-04-26', '2017-05-03'), ('2017-05-03', '2017-05-10'), ('2017-05-10', '2017-05-17'), ('2017-05-17', '2017-05-24'), ('2017-05-24', '2017-05-31'), ('2017-05-31', '2017-06-07'), ('2017-06-07', '2017-06-14'), ('2017-06-14', '2017-06-21'), ('2017-06-21', '2017-06-28'), ('2017-06-28', '2017-07-05'), ('2017-07-05', '2017-07-12'), ('2017-07-12', '2017-07-19'), ('2017-07-19', '2017-07-26'), ('2017-07-26', '2017-08-02'), ('2017-08-02', '2017-08-09'), ('2017-08-09', '2017-08-16'), ('2017-08-16', '2017-08-23'), ('2017-08-23', '2017-08-30'), ('2017-08-30', '2017-09-06'), ('2017-09-06', '2017-09-13'), ('2017-09-13', '2017-09-20'), ('2017-09-20', '2017-09-27'), ('2017-09-27', '2017-10-04'), ('2017-10-04', '2017-10-11')]

# adjust off-set:
# Baseline omits the last day in both cnn and oracle
Re_oa = Re_oa[:-1]
#Re_cnn = Re_cnn[:-1]
# Re_cnn_test should be shortest
Re_ep = Re_ep[len(Re_ep)-len(Re_cnn_test):]
Re_oa = Re_oa[len(Re_oa)-len(Re_cnn_test):]
#Re_cnn = Re_cnn[len(Re_cnn)-len(Re_cnn_test):]


# Find the right place to put label '2016' and '2017'
idx_2016 = -1
idx_2017 = -1
for idx, date in enumerate(Date_cnn_test):
	if date[0][2:4] == '16':
		if idx_2016 == -1:
			idx_2016 = idx
	if date[0][2:4] == '17':
		if idx_2017 == -1:
			idx_2017 = idx
			break

Date = ['' for i in xrange(len(Re_cnn_test))]
#Date[idx_2016] = '2016'
Date[10]=Date_cnn_test[10][1]
Date[-10] = Date_cnn_test[-10][1] 
x = xrange(len(Re_cnn_test))


'''
print len(Re)
print len(Re2)
print len(Re3)
'''


# get the (added log) accumulated return for each senario
def accum(Re):
	result = []
	result.append(Re[0])
	for idx in xrange(1, len(Re)):
		cur = result[-1] + Re[idx]
		result.append(cur)
	#result = np.log(np.array(result))
	return result

Re_ep_accum = accum(Re_ep)
Re_oa_accum = accum(Re_oa)
#Re_cnn_accum = accum(Re_cnn)
Re_cnn_test_accum = accum(Re_cnn_test)

# calculate total return and sharp ration
def totalReturn(Re):
	result = 1
	for re in Re:
		result *= (1+re)
	return result

def sharp_ratio(Re):
	Re = np.array(Re)
	return np.mean(Re)/np.std(Re)

print 'totalReturn \t sharp_ratio'
print 'baseline', totalReturn(Re_ep), sharp_ratio(Re_ep)
print 'oracle', totalReturn(Re_oa), sharp_ratio(Re_oa)
print 'cnn', totalReturn(Re_cnn_test), sharp_ratio(Re_cnn_test)
# do the ploting

plt.plot(x,Re_ep,'*-')
plt.plot(x,Re_oa,'*-')
plt.plot(x,Re_cnn_test,'*-')
plt.xticks(x, Date)
plt.title('Weekly Return')
plt.legend(['Baseline','Oracle', 'CNN Test'])
plt.xlabel('Date')
plt.ylabel('Return')
plt.savefig('Weekly_Re')
#plt.margins(0.2)
#plt.subplots_adjust(bottom=0.15)
plt.show()

plt.plot(x,Re_ep_accum,'*-')
plt.plot(x,Re_oa_accum,'*-')
plt.plot(x,Re_cnn_test_accum,'*-')
plt.xticks(x, Date)
plt.title('Weekly Accumulated Return')
plt.legend(['Baseline','Oracle', 'CNN Test'])
plt.xlabel('Date')
plt.ylabel('Accumulate Return')
plt.savefig('Weekly_Re_Accum')
#plt.margins(0.2)
#plt.subplots_adjust(bottom=0.15)
plt.show()

